{"ast":null,"code":"import _slicedToArray from \"/home/m6d/Documents/react-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar useEventHandler = function useEventHandler(initialValue) {\n  var _useState = useState(initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var handleChange = useCallback(function (_ref) {\n    var value = _ref.target.value;\n    return setValue(value);\n  }, []);\n  var resetValue = useCallback(function () {\n    return setValue(\"\");\n  }, []);\n  return {\n    value: value,\n    handleChange: handleChange,\n    resetValue: resetValue\n  };\n};\n\nuseEventHandler.propTypes = {\n  initialValue: PropTypes.string\n};\nexport default useEventHandler;","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Hooks/useEventHandler/index.js"],"names":["useState","useCallback","PropTypes","useEventHandler","initialValue","value","setValue","handleChange","target","resetValue","propTypes","string"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,YAAY,EAAI;AAAA,kBACZJ,QAAQ,CAACI,YAAD,CADI;AAAA;AAAA,MAC/BC,KAD+B;AAAA,MACxBC,QADwB;;AAEtC,MAAMC,YAAY,GAAGN,WAAW,CAC9B;AAAA,QAAaI,KAAb,QAAGG,MAAH,CAAaH,KAAb;AAAA,WAA2BC,QAAQ,CAACD,KAAD,CAAnC;AAAA,GAD8B,EAE9B,EAF8B,CAAhC;AAIA,MAAMI,UAAU,GAAGR,WAAW,CAAC;AAAA,WAAMK,QAAQ,CAAC,EAAD,CAAd;AAAA,GAAD,EAAqB,EAArB,CAA9B;AAEA,SAAO;AACLD,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,YAAY,EAAZA,YAFK;AAGLE,IAAAA,UAAU,EAAVA;AAHK,GAAP;AAKD,CAbD;;AAeAN,eAAe,CAACO,SAAhB,GAA4B;AAC1BN,EAAAA,YAAY,EAAEF,SAAS,CAACS;AADE,CAA5B;AAIA,eAAeR,eAAf","sourcesContent":["import { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst useEventHandler = initialValue => {\n  const [value, setValue] = useState(initialValue);\n  const handleChange = useCallback(\n    ({ target: { value } }) => setValue(value),\n    []\n  );\n  const resetValue = useCallback(() => setValue(\"\"), []);\n\n  return {\n    value,\n    handleChange,\n    resetValue\n  };\n};\n\nuseEventHandler.propTypes = {\n  initialValue: PropTypes.string\n};\n\nexport default useEventHandler;\n"]},"metadata":{},"sourceType":"module"}