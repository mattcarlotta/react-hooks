{"ast":null,"code":"export default \"import React, { Fragment, useCallback, useState } from \\\"react\\\";\\n\\n// create a custom event handler hook that returns an initial object\\n// of values, a callback function to update the values with a custom\\n// newImageFile object and another callback function to reset the values.\\nconst useFileHandler = initialState => {\\n  const [values, setValues] = useState(initialState);\\n  const handleChange = useCallback(({ target: { name, files } }) => {\\n    const newImageFile = {\\n      file: files[0],\\n      name: files[0].name,\\n      preview: URL.createObjectURL(files[0]),\\n      size: files[0].size\\n    };\\n\\n    setValues({ [name]: [newImageFile] });\\n  }, []);\\n  const resetValues = useCallback(() => setValues(initialState), [\\n    initialState\\n  ]);\\n\\n  return {\\n    values,\\n    handleChange,\\n    resetValues\\n  };\\n};\\n\\n// utilize the custom useFileHandler hook within a function. in addition, \\n// include a handleSubmit function that handles the form when it has \\n// been submitted. NOTE: The \\\"file\\\" property within \\\"imageFile\\\" is\\n// a FileList and it will not show up in an alert/console.log; however,\\n// it's still there!\\nconst UploadFile = () => {\\n  const { values, handleChange, resetValues } = useFileHandler({\\n    imageFile: []\\n  });\\n\\n  const handleSubmit = e => {\\n    e.preventDefault();\\n    alert(JSON.stringify(values, null, 4));\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input\\n        accept=\\\"image/jpeg, image/png, image/gif, image/bmp\\\"\\n        type=\\\"file\\\"\\n        multiple={false}\\n        name=\\\"imageFile\\\"\\n        onChange={handleChange}\\n      />           \\n      {values.imageFile && values.imageFile.length > 0\\n        ? values.imageFile.map({ name, preview, size }) => (\\n            <Fragment key={name}>\\n              <img src={preview} />\\n              <p>{name} - {(size / 1024000).toFixed(2)}MB</p>\\n            </Fragment>\\n          ))\\n        : null\\n      }\\n    </form>\\n  );\\n};\\n\\nexport default UploadFile;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Forms/UploadFile.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { Fragment, useCallback, useState } from \"react\";\n\n// create a custom event handler hook that returns an initial object\n// of values, a callback function to update the values with a custom\n// newImageFile object and another callback function to reset the values.\nconst useFileHandler = initialState => {\n  const [values, setValues] = useState(initialState);\n  const handleChange = useCallback(({ target: { name, files } }) => {\n    const newImageFile = {\n      file: files[0],\n      name: files[0].name,\n      preview: URL.createObjectURL(files[0]),\n      size: files[0].size\n    };\n\n    setValues({ [name]: [newImageFile] });\n  }, []);\n  const resetValues = useCallback(() => setValues(initialState), [\n    initialState\n  ]);\n\n  return {\n    values,\n    handleChange,\n    resetValues\n  };\n};\n\n// utilize the custom useFileHandler hook within a function. in addition, \n// include a handleSubmit function that handles the form when it has \n// been submitted. NOTE: The \"file\" property within \"imageFile\" is\n// a FileList and it will not show up in an alert/console.log; however,\n// it's still there!\nconst UploadFile = () => {\n  const { values, handleChange, resetValues } = useFileHandler({\n    imageFile: []\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    alert(JSON.stringify(values, null, 4));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        accept=\"image/jpeg, image/png, image/gif, image/bmp\"\n        type=\"file\"\n        multiple={false}\n        name=\"imageFile\"\n        onChange={handleChange}\n      />           \n      {values.imageFile && values.imageFile.length > 0\n        ? values.imageFile.map({ name, preview, size }) => (\n            <Fragment key={name}>\n              <img src={preview} />\n              <p>{name} - {(size / 1024000).toFixed(2)}MB</p>\n            </Fragment>\n          ))\n        : null\n      }\n    </form>\n  );\n};\n\nexport default UploadFile;\n`;\n"]},"metadata":{},"sourceType":"module"}