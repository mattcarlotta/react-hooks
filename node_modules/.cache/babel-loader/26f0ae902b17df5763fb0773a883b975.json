{"ast":null,"code":"export default \"import React, { useCallback, useState } from \\\"react\\\";\\nimport { FaUserPlus, FaToggleOff, FaToggleOn } from \\\"react-icons/fa\\\";\\n\\n// create a custom useFormHandler hook that returns initial values\\n// and a handleChange function to update the values.\\n// the handleChange function will first deconstruct e.target.name and\\n// e.target.value, then in the setValues callback function, it'll \\n// spread out any previous state before updating the changed [name] \\n// property (ex. name=\\\"username\\\") with an updated \\\"value\\\".\\nconst useFormHandler = initialState => {\\n  const [values, setValues] = useState(initialState);\\n\\n  const handleChange = useCallback(\\n    ({ target: { name, value } }) =>\\n      setValues(prevState => ({ ...prevState, [name]: value })),\\n    []\\n  );\\n\\n  return {\\n    handleChange,\\n    values\\n  };\\n};\\n\\n// create a custom toggle hook that returns an initial value and \\n// a callback function to update the value.\\nconst useToggle = initialValue => {\\n  const [value, setValue] = useState(initialValue);\\n  const handleChange = useCallback(() => setValue(value => !value));\\n  return [value, handleChange];\\n};\\n\\nconst inputFields = [\\n  { type: \\\"email\\\", name: \\\"email\\\", placeholder: \\\"Email\\\" },\\n  { type: \\\"password\\\", name: \\\"password\\\", placeholder: \\\"Password\\\" },\\n  { name: \\\"firstName\\\", placeholder: \\\"First Name\\\" },\\n  { name: \\\"lastName\\\", placeholder: \\\"Last Name\\\" },\\n  { name: \\\"address\\\", placeholder: \\\"Address\\\" },\\n  { name: \\\"city\\\", placeholder: \\\"City\\\" },\\n  { name: \\\"state\\\", placeholder: \\\"State/Providence\\\" },\\n  { name: \\\"zip\\\", placeholder: \\\"Zip/Postal Code\\\" }\\n];\\n\\nconst selectOptions = [\\n  \\\"Canada\\\", \\n  \\\"United States\\\", \\n];\\n\\nconst addressTypes = [\\n  \\\"Residential\\\",\\n  \\\"Business\\\"\\n];\\n\\n// utilize the custom useFormHandler and useToggle hooks within \\n// a function. in addition, include a handleSubmit function that\\n// handles the form when it has been submitted.\\nconst RegistrationForm = () => {\\n  const { values, handleChange } = useFormHandler({\\n    email: \\\"\\\",\\n    password: \\\"\\\",\\n    firstName: \\\"\\\",\\n    lastName: \\\"\\\",\\n    address: \\\"\\\",\\n    city: \\\"\\\",\\n    state: \\\"\\\",\\n    zip: \\\"\\\",\\n    country: \\\"\\\",\\n    addressType: \\\"\\\"\\n  });\\n  \\n  const [toggleState, toggleSwitch] = useToggle(false);\\n\\n  const handleSubmit = e => {\\n    e.preventDefault();\\n    const formProps = { ...values, sameAsBillingAddr: toggleState };\\n    alert(JSON.stringify(formProps, null, 4));\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      {inputFields.map(({ name, type, placeholder }) => (\\n        <input\\n          key={name}\\n          type={type || \\\"text\\\"}\\n          name={name}\\n          placeholder={placeholder}\\n          onChange={handleChange}\\n          value={values[name]}\\n        />\\n      ))}\\n      <select\\n        name=\\\"country\\\"\\n        placeholder=\\\"Select a country...\\\"\\n        onChange={handleChange}\\n        value={values.country}\\n      >\\n        {selectOptions.map(value => (\\n          <option key={value} value={value}>\\n            {value}\\n          </option>\\n        ))}\\n      </select>\\n      {addressTypes.map(type => (\\n        <span key={type}>\\n          <input \\n            type=\\\"radio\\\" \\n            id={type}\\n            name=\\\"addressType\\\"\\n            value={type}\\n            onChange={handleChange}\\n            checked={type === values.addressType}\\n          />\\n          <label htmlFor={type}/>{type}</label>\\n        </span>\\n      ))}\\n      <button type=\\\"button\\\" onClick={setToggleState}>\\n        {!toggleState ? <FaToggleOff /> : <FaToggleOn />}\\n      </button>\\n      <button type=\\\"submit\\\">\\n        <FaUserPlus/> Register\\n      </button>\\n    </form>\\n  );\\n};\\n\\nexport default RegistrationForm;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Forms/Registration.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { useCallback, useState } from \"react\";\nimport { FaUserPlus, FaToggleOff, FaToggleOn } from \"react-icons/fa\";\n\n// create a custom useFormHandler hook that returns initial values\n// and a handleChange function to update the values.\n// the handleChange function will first deconstruct e.target.name and\n// e.target.value, then in the setValues callback function, it'll \n// spread out any previous state before updating the changed [name] \n// property (ex. name=\"username\") with an updated \"value\".\nconst useFormHandler = initialState => {\n  const [values, setValues] = useState(initialState);\n\n  const handleChange = useCallback(\n    ({ target: { name, value } }) =>\n      setValues(prevState => ({ ...prevState, [name]: value })),\n    []\n  );\n\n  return {\n    handleChange,\n    values\n  };\n};\n\n// create a custom toggle hook that returns an initial value and \n// a callback function to update the value.\nconst useToggle = initialValue => {\n  const [value, setValue] = useState(initialValue);\n  const handleChange = useCallback(() => setValue(value => !value));\n  return [value, handleChange];\n};\n\nconst inputFields = [\n  { type: \"email\", name: \"email\", placeholder: \"Email\" },\n  { type: \"password\", name: \"password\", placeholder: \"Password\" },\n  { name: \"firstName\", placeholder: \"First Name\" },\n  { name: \"lastName\", placeholder: \"Last Name\" },\n  { name: \"address\", placeholder: \"Address\" },\n  { name: \"city\", placeholder: \"City\" },\n  { name: \"state\", placeholder: \"State/Providence\" },\n  { name: \"zip\", placeholder: \"Zip/Postal Code\" }\n];\n\nconst selectOptions = [\n  \"Canada\", \n  \"United States\", \n];\n\nconst addressTypes = [\n  \"Residential\",\n  \"Business\"\n];\n\n// utilize the custom useFormHandler and useToggle hooks within \n// a function. in addition, include a handleSubmit function that\n// handles the form when it has been submitted.\nconst RegistrationForm = () => {\n  const { values, handleChange } = useFormHandler({\n    email: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    zip: \"\",\n    country: \"\",\n    addressType: \"\"\n  });\n  \n  const [toggleState, toggleSwitch] = useToggle(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const formProps = { ...values, sameAsBillingAddr: toggleState };\n    alert(JSON.stringify(formProps, null, 4));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {inputFields.map(({ name, type, placeholder }) => (\n        <input\n          key={name}\n          type={type || \"text\"}\n          name={name}\n          placeholder={placeholder}\n          onChange={handleChange}\n          value={values[name]}\n        />\n      ))}\n      <select\n        name=\"country\"\n        placeholder=\"Select a country...\"\n        onChange={handleChange}\n        value={values.country}\n      >\n        {selectOptions.map(value => (\n          <option key={value} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n      {addressTypes.map(type => (\n        <span key={type}>\n          <input \n            type=\"radio\" \n            id={type}\n            name=\"addressType\"\n            value={type}\n            onChange={handleChange}\n            checked={type === values.addressType}\n          />\n          <label htmlFor={type}/>{type}</label>\n        </span>\n      ))}\n      <button type=\"button\" onClick={setToggleState}>\n        {!toggleState ? <FaToggleOff /> : <FaToggleOn />}\n      </button>\n      <button type=\"submit\">\n        <FaUserPlus/> Register\n      </button>\n    </form>\n  );\n};\n\nexport default RegistrationForm;\n`;\n"]},"metadata":{},"sourceType":"module"}