{"ast":null,"code":"export default \"import React, { useCallback, useState } from \\\"react\\\";\\n\\n// create a custom useFormHandler hook that returns initial values\\n// and a handleChange function to update the values.\\n// the handleChange function will first deconstruct e.target.name and\\n// e.target.value, then in the setValues callback function, it'll \\n// spread out any previous state before updating the changed [name] \\n// property (ex. name=\\\"username\\\") with an updated \\\"value\\\".\\nconst useFormHandler = initialState => {\\n  const [values, setValues] = useState(initialState);\\n\\n  const handleChange = useCallback(\\n    ({ target: { name, value } }) =>\\n      setValues(prevState => ({ ...prevState, [name]: value })),\\n    []\\n  );\\n\\n  return {\\n    handleChange,\\n    values\\n  };\\n};\\n\\n// create a custom toggle hook that returns an initial value and \\n// a callback function to update the value.\\nconst useToggle = initialValue => {\\n  const [value, setValue] = useState(initialValue);\\n  const handleChange = useCallback(() => setValue(value => !value));\\n  return [value, handleChange];\\n};\\n\\n// utilize the custom useFormHandler and useToggle hooks within \\n// a function. in addition, include a handleSubmit function that\\n// handles the form when it has been submitted.\\nconst LoginForm = () => {\\n  const { values, handleChange } = useFormHandler({\\n    username: \\\"\\\",\\n    password: \\\"\\\"\\n  });\\n  \\n  const [rememberUser, toggleRememberUser] = useToggle(false);\\n\\n  const handleSubmit = e => {\\n    e.preventDefault();\\n    const formProps = { ...values, rememberUser };\\n    alert(JSON.stringify(formProps, null, 4));\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <input\\n        type=\\\"text\\\"\\n        name=\\\"username\\\"\\n        placeholder=\\\"Username\\\"\\n        onChange={handleChange}\\n        value={values.username}\\n      />\\n      <input\\n        type=\\\"password\\\"\\n        name=\\\"password\\\"\\n        placeholder=\\\"Password\\\"\\n        onChange={handleChange}\\n        value={values.password}\\n      />\\n      <label htmlFor=\\\"rememberUser\\\">Remember Me</label>\\n      <input \\n        name=\\\"rememberUser\\\"\\n        checked={rememberUser} \\n        onChange={toggleRememberUser} \\n        type=\\\"checkbox\\\"\\n        value={rememberUser} \\n      />\\n      <a href=\\\"#\\\">Forgot Password</a>\\n      <button type=\\\"submit\\\">Log in</button>\\n    </form>\\n  );\\n};\\n\\nexport default LoginForm;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Forms/Login.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { useCallback, useState } from \"react\";\n\n// create a custom useFormHandler hook that returns initial values\n// and a handleChange function to update the values.\n// the handleChange function will first deconstruct e.target.name and\n// e.target.value, then in the setValues callback function, it'll \n// spread out any previous state before updating the changed [name] \n// property (ex. name=\"username\") with an updated \"value\".\nconst useFormHandler = initialState => {\n  const [values, setValues] = useState(initialState);\n\n  const handleChange = useCallback(\n    ({ target: { name, value } }) =>\n      setValues(prevState => ({ ...prevState, [name]: value })),\n    []\n  );\n\n  return {\n    handleChange,\n    values\n  };\n};\n\n// create a custom toggle hook that returns an initial value and \n// a callback function to update the value.\nconst useToggle = initialValue => {\n  const [value, setValue] = useState(initialValue);\n  const handleChange = useCallback(() => setValue(value => !value));\n  return [value, handleChange];\n};\n\n// utilize the custom useFormHandler and useToggle hooks within \n// a function. in addition, include a handleSubmit function that\n// handles the form when it has been submitted.\nconst LoginForm = () => {\n  const { values, handleChange } = useFormHandler({\n    username: \"\",\n    password: \"\"\n  });\n  \n  const [rememberUser, toggleRememberUser] = useToggle(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const formProps = { ...values, rememberUser };\n    alert(JSON.stringify(formProps, null, 4));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"username\"\n        placeholder=\"Username\"\n        onChange={handleChange}\n        value={values.username}\n      />\n      <input\n        type=\"password\"\n        name=\"password\"\n        placeholder=\"Password\"\n        onChange={handleChange}\n        value={values.password}\n      />\n      <label htmlFor=\"rememberUser\">Remember Me</label>\n      <input \n        name=\"rememberUser\"\n        checked={rememberUser} \n        onChange={toggleRememberUser} \n        type=\"checkbox\"\n        value={rememberUser} \n      />\n      <a href=\"#\">Forgot Password</a>\n      <button type=\"submit\">Log in</button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n`;\n"]},"metadata":{},"sourceType":"module"}