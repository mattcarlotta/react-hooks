{"ast":null,"code":"import _slicedToArray from \"/home/m6d/Documents/react-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/m6d/Documents/react-hooks/src/components/Body/Select/ClickHandler/index.js\";\nimport React, { createRef, useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport InlineBlockContainer from \"../../InlineBlockContainer\";\n\nvar ClickHandler = function ClickHandler(_ref) {\n  var children = _ref.children,\n      handleChange = _ref.handleChange,\n      width = _ref.width;\n  var wrapperRef = createRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var handleClickOutside = useCallback(function (_ref2) {\n    var target = _ref2.target;\n\n    if (isVisible && wrapperRef && !wrapperRef.current.contains(target)) {\n      setVisible(false);\n    }\n  }, [isVisible, wrapperRef]);\n\n  var handleSelectClick = function handleSelectClick() {\n    setVisible(function (visible) {\n      return !visible;\n    });\n  };\n\n  var handleOptionSelect = function handleOptionSelect(e) {\n    setVisible(false);\n    handleChange(e);\n  };\n\n  useEffect(function () {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return function () {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [handleClickOutside]);\n  return React.createElement(InlineBlockContainer, {\n    xs: \"175px\",\n    sm: \"200px\",\n    md: \"250px\",\n    lg: \"250px\",\n    width: width,\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, children({\n    isVisible: isVisible,\n    handleSelectClick: handleSelectClick,\n    handleOptionSelect: handleOptionSelect\n  }));\n};\n\nClickHandler.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  children: PropTypes.func.isRequired,\n  width: PropTypes.string\n};\nexport default ClickHandler;","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Body/Select/ClickHandler/index.js"],"names":["React","createRef","useState","useEffect","useCallback","PropTypes","InlineBlockContainer","ClickHandler","children","handleChange","width","wrapperRef","isVisible","setVisible","handleClickOutside","target","current","contains","handleSelectClick","visible","handleOptionSelect","e","document","addEventListener","removeEventListener","propTypes","func","isRequired","string"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,WAAhD,QAAmE,OAAnE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,oBAAP,MAAiC,4BAAjC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAuC;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;AAAA,MAA1BC,YAA0B,QAA1BA,YAA0B;AAAA,MAAZC,KAAY,QAAZA,KAAY;AAC1D,MAAMC,UAAU,GAAGV,SAAS,EAA5B;;AAD0D,kBAE1BC,QAAQ,CAAC,KAAD,CAFkB;AAAA;AAAA,MAEnDU,SAFmD;AAAA,MAExCC,UAFwC;;AAI1D,MAAMC,kBAAkB,GAAGV,WAAW,CACpC,iBAAgB;AAAA,QAAbW,MAAa,SAAbA,MAAa;;AACd,QAAIH,SAAS,IAAID,UAAb,IAA2B,CAACA,UAAU,CAACK,OAAX,CAAmBC,QAAnB,CAA4BF,MAA5B,CAAhC,EAAqE;AACnEF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GALmC,EAMpC,CAACD,SAAD,EAAYD,UAAZ,CANoC,CAAtC;;AASA,MAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BL,IAAAA,UAAU,CAAC,UAAAM,OAAO;AAAA,aAAI,CAACA,OAAL;AAAA,KAAR,CAAV;AACD,GAFD;;AAIA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,CAAC,EAAI;AAC9BR,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,IAAAA,YAAY,CAACY,CAAD,CAAZ;AACD,GAHD;;AAKAlB,EAAAA,SAAS,CACP,YAAM;AACJmB,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCT,kBAAvC;AAEA,WAAO,YAAM;AACXQ,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CV,kBAA1C;AACD,KAFD;AAGD,GAPM,EAQP,CAACA,kBAAD,CARO,CAAT;AAWA,SACE,oBAAC,oBAAD;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,EAAE,EAAC,OAFL;AAGE,IAAA,EAAE,EAAC,OAHL;AAIE,IAAA,EAAE,EAAC,OAJL;AAKE,IAAA,KAAK,EAAEJ,KALT;AAME,IAAA,GAAG,EAAEC,UANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGH,QAAQ,CAAC;AACRI,IAAAA,SAAS,EAATA,SADQ;AAERM,IAAAA,iBAAiB,EAAjBA,iBAFQ;AAGRE,IAAAA,kBAAkB,EAAlBA;AAHQ,GAAD,CARX,CADF;AAgBD,CAjDD;;AAmDAb,YAAY,CAACkB,SAAb,GAAyB;AACvBhB,EAAAA,YAAY,EAAEJ,SAAS,CAACqB,IAAV,CAAeC,UADN;AAEvBnB,EAAAA,QAAQ,EAAEH,SAAS,CAACqB,IAAV,CAAeC,UAFF;AAGvBjB,EAAAA,KAAK,EAAEL,SAAS,CAACuB;AAHM,CAAzB;AAMA,eAAerB,YAAf","sourcesContent":["import React, { createRef, useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport InlineBlockContainer from \"../../InlineBlockContainer\";\n\nconst ClickHandler = ({ children, handleChange, width }) => {\n  const wrapperRef = createRef();\n  const [isVisible, setVisible] = useState(false);\n\n  const handleClickOutside = useCallback(\n    ({ target }) => {\n      if (isVisible && wrapperRef && !wrapperRef.current.contains(target)) {\n        setVisible(false);\n      }\n    },\n    [isVisible, wrapperRef]\n  );\n\n  const handleSelectClick = () => {\n    setVisible(visible => !visible);\n  };\n\n  const handleOptionSelect = e => {\n    setVisible(false);\n    handleChange(e);\n  };\n\n  useEffect(\n    () => {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n\n      return () => {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    },\n    [handleClickOutside]\n  );\n\n  return (\n    <InlineBlockContainer\n      xs=\"175px\"\n      sm=\"200px\"\n      md=\"250px\"\n      lg=\"250px\"\n      width={width}\n      ref={wrapperRef}\n    >\n      {children({\n        isVisible,\n        handleSelectClick,\n        handleOptionSelect\n      })}\n    </InlineBlockContainer>\n  );\n};\n\nClickHandler.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  children: PropTypes.func.isRequired,\n  width: PropTypes.string\n};\n\nexport default ClickHandler;\n"]},"metadata":{},"sourceType":"module"}