{"ast":null,"code":"export default \"import React, { Fragment, useCallback, useState } from \\\"react\\\";\\n\\n// create a custom event handler hook that returns an initial object\\n// of values and a callback function to update the values.\\nconst useEventHandler = initialState => {\\n  const [value, setValue] = useState(initialState);\\n  const handleChange = useCallback(\\n    ({ target: { name, value } }) => setValue({ [name]: value }),\\n    []\\n  );\\n\\n  return {\\n    value,\\n    handleChange\\n  };\\n};\\n\\nconst options = [\\\"blue\\\", \\\"red\\\", \\\"violet\\\", \\\"pink\\\", \\\"yellow\\\"];\\n\\n// utilize the custom useEventHandler hook within a function.\\n// to keep the radios as a group, they should all share the\\n// the same \\\"name\\\" property.\\nconst RadioGroup = () => {\\n  const { value, handleChange } = useEventHandler({\\n    favoriteColor: \\\"\\\"\\n  });\\n\\n  return (\\n    <Fragment>\\n      <p>Favorite:</p>\\n      {options.map(color => (\\n        <span key={color}>\\n          <input \\n            type=\\\"radio\\\" \\n            id={color}\\n            name=\\\"favoriteColor\\\"\\n            value={color}\\n            onChange={handleChange}\\n            checked={color === value.favoriteColor}\\n          />\\n          <label htmlFor={color}/>{color}</label>\\n        </span>\\n      ))}\\n    </Fragment>\\n  );\\n};\\n\\nexport default RadioGroup;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Forms/RadioGroup.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { Fragment, useCallback, useState } from \"react\";\n\n// create a custom event handler hook that returns an initial object\n// of values and a callback function to update the values.\nconst useEventHandler = initialState => {\n  const [value, setValue] = useState(initialState);\n  const handleChange = useCallback(\n    ({ target: { name, value } }) => setValue({ [name]: value }),\n    []\n  );\n\n  return {\n    value,\n    handleChange\n  };\n};\n\nconst options = [\"blue\", \"red\", \"violet\", \"pink\", \"yellow\"];\n\n// utilize the custom useEventHandler hook within a function.\n// to keep the radios as a group, they should all share the\n// the same \"name\" property.\nconst RadioGroup = () => {\n  const { value, handleChange } = useEventHandler({\n    favoriteColor: \"\"\n  });\n\n  return (\n    <Fragment>\n      <p>Favorite:</p>\n      {options.map(color => (\n        <span key={color}>\n          <input \n            type=\"radio\" \n            id={color}\n            name=\"favoriteColor\"\n            value={color}\n            onChange={handleChange}\n            checked={color === value.favoriteColor}\n          />\n          <label htmlFor={color}/>{color}</label>\n        </span>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default RadioGroup;\n`;\n"]},"metadata":{},"sourceType":"module"}