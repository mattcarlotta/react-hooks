{"ast":null,"code":"import _defineProperty from \"/home/m6d/Documents/react-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/m6d/Documents/react-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/m6d/Documents/react-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar useDragDropHandler = function useDragDropHandler(initialState) {\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      values = _useState2[0],\n      setValues = _useState2[1];\n\n  var handleChange = useCallback(function (_ref) {\n    var destination = _ref.destination,\n        source = _ref.source,\n        draggableId = _ref.draggableId;\n\n    if (destination && source) {\n      setValues(function (prevState) {\n        var _ref3;\n\n        var sourceIndex = source.index;\n        var destinationIndex = destination.index;\n        var sourceContainer = prevState.columns[source.droppableId];\n        var destinationContainer = prevState.columns[destination.droppableId];\n        var sourceIds = Array.from(sourceContainer.taskIds);\n        var destinationIds = Array.from(destinationContainer.taskIds);\n        var isSameContainer = sourceContainer === destinationContainer;\n        sourceIds.splice(sourceIndex, 1);\n\n        if (isSameContainer) {\n          sourceIds.splice(destinationIndex, 0, draggableId);\n        } else {\n          destinationIds.splice(destinationIndex, 0, draggableId);\n        }\n\n        var newSourceContainer = _objectSpread({}, sourceContainer, {\n          taskIds: sourceIds\n        });\n\n        var newDestinationContainer = _objectSpread({}, destinationContainer, {\n          taskIds: destinationIds\n        });\n\n        var updatedColumns = isSameContainer ? _defineProperty({}, newSourceContainer.id, newSourceContainer) : (_ref3 = {}, _defineProperty(_ref3, newSourceContainer.id, newSourceContainer), _defineProperty(_ref3, newDestinationContainer.id, newDestinationContainer), _ref3);\n        return _objectSpread({}, prevState, {\n          columns: _objectSpread({}, prevState.columns, updatedColumns)\n        });\n      });\n    }\n  }, []);\n  var resetValues = useCallback(function () {\n    return setValues(initialState);\n  }, [initialState]);\n  return {\n    values: values,\n    handleChange: handleChange,\n    resetValues: resetValues\n  };\n};\n\nuseDragDropHandler.propTypes = {\n  initialState: PropTypes.shape({\n    tasks: PropTypes.objectOf(PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired\n    })),\n    columns: PropTypes.objectOf(PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      taskIds: PropTypes.arrayOf(PropTypes.string)\n    }))\n  }).isRequired\n};\nexport default useDragDropHandler;","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Hooks/useDragDropHandler/index.js"],"names":["useState","useCallback","PropTypes","useDragDropHandler","initialState","values","setValues","handleChange","destination","source","draggableId","prevState","sourceIndex","index","destinationIndex","sourceContainer","columns","droppableId","destinationContainer","sourceIds","Array","from","taskIds","destinationIds","isSameContainer","splice","newSourceContainer","newDestinationContainer","updatedColumns","id","resetValues","propTypes","shape","tasks","objectOf","string","isRequired","description","title","arrayOf"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst useDragDropHandler = initialState => {\n  const [values, setValues] = useState(initialState);\n  const handleChange = useCallback(({ destination, source, draggableId }) => {\n    if (destination && source) {\n      setValues(prevState => {\n        const sourceIndex = source.index;\n        const destinationIndex = destination.index;\n        const sourceContainer = prevState.columns[source.droppableId];\n        const destinationContainer = prevState.columns[destination.droppableId];\n        const sourceIds = Array.from(sourceContainer.taskIds);\n        const destinationIds = Array.from(destinationContainer.taskIds);\n        const isSameContainer = sourceContainer === destinationContainer;\n\n        sourceIds.splice(sourceIndex, 1);\n\n        if (isSameContainer) {\n          sourceIds.splice(destinationIndex, 0, draggableId);\n        } else {\n          destinationIds.splice(destinationIndex, 0, draggableId);\n        }\n\n        const newSourceContainer = {\n          ...sourceContainer,\n          taskIds: sourceIds\n        };\n\n        const newDestinationContainer = {\n          ...destinationContainer,\n          taskIds: destinationIds\n        };\n\n        const updatedColumns = isSameContainer\n          ? { [newSourceContainer.id]: newSourceContainer }\n          : {\n              [newSourceContainer.id]: newSourceContainer,\n              [newDestinationContainer.id]: newDestinationContainer\n            };\n\n        return {\n          ...prevState,\n          columns: {\n            ...prevState.columns,\n            ...updatedColumns\n          }\n        };\n      });\n    }\n  }, []);\n  const resetValues = useCallback(() => setValues(initialState), [\n    initialState\n  ]);\n\n  return {\n    values,\n    handleChange,\n    resetValues\n  };\n};\n\nuseDragDropHandler.propTypes = {\n  initialState: PropTypes.shape({\n    tasks: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired\n      })\n    ),\n    columns: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        taskIds: PropTypes.arrayOf(PropTypes.string)\n      })\n    )\n  }).isRequired\n};\n\nexport default useDragDropHandler;\n"]},"metadata":{},"sourceType":"module"}