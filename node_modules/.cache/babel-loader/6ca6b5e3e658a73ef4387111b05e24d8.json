{"ast":null,"code":"import _objectSpread from \"/home/m6d/Documents/react-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/m6d/Documents/react-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nexport var validateFields = function validateFields(fields) {\n  var validatedFields = fields.map(function (_ref) {\n    var fieldName = _ref.fieldName,\n        value = _ref.value;\n    var error = \"\";\n\n    if (!value) {\n      error = \"Required\";\n    } else {\n      if (fieldName === \"name\" && value.length <= 1) error = \"Name must be longer than 1 character!\";\n      if (fieldName === \"email\" && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) error = \"Invalid email. (john.smith@example.com)\";\n\n      if (fieldName === \"phone\") {\n        if (!/^[0-9-]+$/.test(value)) error = \"Invalid phone number. Do not use special characters.\";else if (value.length !== 14) error = \"Invalid phone format. (1-555-555-5555)\";\n      }\n    }\n\n    return {\n      fieldName: fieldName,\n      value: value,\n      error: error\n    };\n  });\n  var errors = null;\n  validatedFields.forEach(function (_ref2) {\n    var error = _ref2.error;\n    if (error) errors += 1;\n  });\n  return {\n    validatedFields: validatedFields,\n    errors: errors\n  };\n};\n\nvar useFieldValidator = function useFieldValidator(initialState) {\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      values = _useState2[0],\n      setValues = _useState2[1];\n\n  var handleChange = useCallback(function (_ref3) {\n    var _ref3$target = _ref3.target,\n        name = _ref3$target.name,\n        value = _ref3$target.value;\n    setValues(function (prevState) {\n      return _objectSpread({}, prevState, {\n        fields: prevState.fields.map(function (field) {\n          return field.fieldName === name ? _objectSpread({}, field, {\n            value: value\n          }) : field;\n        })\n      });\n    });\n  }, []);\n  var resetValues = useCallback(function () {\n    return setValues(initialState);\n  }, [initialState]);\n  var handleSubmit = useCallback(function (e) {\n    e.preventDefault();\n\n    var _validateFields = validateFields(values.fields),\n        validatedFields = _validateFields.validatedFields,\n        errors = _validateFields.errors;\n\n    setValues({\n      fields: validatedFields\n    });\n\n    if (!errors) {\n      setTimeout(function () {\n        alert(JSON.stringify(values.fields, null, 4));\n        resetValues();\n      }, 300);\n    }\n  }, [resetValues, values]);\n  return {\n    values: values,\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    resetValues: resetValues\n  };\n};\n\nuseFieldValidator.propTypes = {\n  initialState: PropTypes.shape({\n    fields: PropTypes.arrayOf(PropTypes.shape({\n      fieldName: PropTypes.string.isRequired,\n      value: PropTypes.string,\n      error: PropTypes.string\n    })),\n    errors: PropTypes.number.isRequired\n  })\n};\nexport default useFieldValidator;","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Hooks/useFieldValidator/index.js"],"names":["useState","useCallback","PropTypes","validateFields","fields","validatedFields","map","fieldName","value","error","length","test","errors","forEach","useFieldValidator","initialState","values","setValues","handleChange","target","name","prevState","field","resetValues","handleSubmit","e","preventDefault","setTimeout","alert","JSON","stringify","propTypes","shape","arrayOf","string","isRequired","number"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const validateFields = fields => {\n  const validatedFields = fields.map(({ fieldName, value }) => {\n    let error = \"\";\n    if (!value) {\n      error = \"Required\";\n    } else {\n      if (fieldName === \"name\" && value.length <= 1)\n        error = \"Name must be longer than 1 character!\";\n\n      if (\n        fieldName === \"email\" &&\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\n      )\n        error = \"Invalid email. (john.smith@example.com)\";\n\n      if (fieldName === \"phone\") {\n        if (!/^[0-9-]+$/.test(value))\n          error = \"Invalid phone number. Do not use special characters.\";\n        else if (value.length !== 14)\n          error = \"Invalid phone format. (1-555-555-5555)\";\n      }\n    }\n\n    return { fieldName, value, error };\n  });\n\n  let errors = null;\n  validatedFields.forEach(({ error }) => {\n    if (error) errors += 1;\n  });\n\n  return { validatedFields, errors };\n};\n\nconst useFieldValidator = initialState => {\n  const [values, setValues] = useState(initialState);\n\n  const handleChange = useCallback(({ target: { name, value } }) => {\n    setValues(prevState => ({\n      ...prevState,\n      fields: prevState.fields.map(field =>\n        field.fieldName === name ? { ...field, value } : field\n      )\n    }));\n  }, []);\n\n  const resetValues = useCallback(() => setValues(initialState), [\n    initialState\n  ]);\n\n  const handleSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      const { validatedFields, errors } = validateFields(values.fields);\n      setValues({ fields: validatedFields });\n      if (!errors) {\n        setTimeout(() => {\n          alert(JSON.stringify(values.fields, null, 4));\n          resetValues();\n        }, 300);\n      }\n    },\n    [resetValues, values]\n  );\n\n  return {\n    values,\n    handleChange,\n    handleSubmit,\n    resetValues\n  };\n};\n\nuseFieldValidator.propTypes = {\n  initialState: PropTypes.shape({\n    fields: PropTypes.arrayOf(\n      PropTypes.shape({\n        fieldName: PropTypes.string.isRequired,\n        value: PropTypes.string,\n        error: PropTypes.string\n      })\n    ),\n    errors: PropTypes.number.isRequired\n  })\n};\n\nexport default useFieldValidator;\n"]},"metadata":{},"sourceType":"module"}