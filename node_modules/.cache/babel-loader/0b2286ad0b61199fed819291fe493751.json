{"ast":null,"code":"export default \"import React, { Fragment, useCallback, useState } from \\\"react\\\";\\nimport { FaTrash } from \\\"react-icons/fa\\\";\\n\\n// create a custom event handler hook that returns an initial value, \\n// a callback function to update the value and another callback \\n// function to reset the value.\\nconst useEventHandler = initialValue => {\\n  const [value, setValue] = useState(initialValue);\\n  const handleChange = useCallback(\\n    ({ target: { value } }) => setValue(value),\\n    []\\n  );\\n  const resetValue = useCallback(() => setValue(\\\"\\\"), []);\\n\\n  return {\\n    value,\\n    handleChange,\\n    resetValue\\n  };\\n};\\n\\n// utilize the custom useEventHandler hook within a function.\\nconst Input = () => {\\n  const { value, handleChange, resetValue } = useEventHandler(\\\"\\\");\\n\\n  return (\\n    <Fragment>\\n      <label htmlFor=\\\"example\\\">Input:</label>\\n      <input\\n        type=\\\"text\\\"\\n        name=\\\"example\\\"\\n        placeholder=\\\"Type something...\\\"\\n        onChange={handleChange}\\n        value={value}\\n      />\\n      <button onClick={resetValue}>\\n        <FaTrash />\\n      </button>\\n    </Fragment>\\n  );\\n};\\n\\nexport default Input;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Forms/Input.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { Fragment, useCallback, useState } from \"react\";\nimport { FaTrash } from \"react-icons/fa\";\n\n// create a custom event handler hook that returns an initial value, \n// a callback function to update the value and another callback \n// function to reset the value.\nconst useEventHandler = initialValue => {\n  const [value, setValue] = useState(initialValue);\n  const handleChange = useCallback(\n    ({ target: { value } }) => setValue(value),\n    []\n  );\n  const resetValue = useCallback(() => setValue(\"\"), []);\n\n  return {\n    value,\n    handleChange,\n    resetValue\n  };\n};\n\n// utilize the custom useEventHandler hook within a function.\nconst Input = () => {\n  const { value, handleChange, resetValue } = useEventHandler(\"\");\n\n  return (\n    <Fragment>\n      <label htmlFor=\"example\">Input:</label>\n      <input\n        type=\"text\"\n        name=\"example\"\n        placeholder=\"Type something...\"\n        onChange={handleChange}\n        value={value}\n      />\n      <button onClick={resetValue}>\n        <FaTrash />\n      </button>\n    </Fragment>\n  );\n};\n\nexport default Input;\n`;\n"]},"metadata":{},"sourceType":"module"}