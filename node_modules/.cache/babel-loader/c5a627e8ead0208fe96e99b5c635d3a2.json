{"ast":null,"code":"export default \"import React, { Fragment, useCallback, useState } from \\\"react\\\";\\nimport { FaTrash } from \\\"react-icons/fa\\\";\\n\\n// create a custom useLocalEventStorage hook that returns an initial object\\n// of values, a callback function to update the values and another\\n// callback function to reset the values.\\nconst useLocalEventStorage = (key, initialValue) => {\\n  const [storedValue, setStoredValue] = useState(() => {\\n    try {\\n      // attempts to retrieve localStorage item via \\\"key\\\" upon initial load\\n      const item = window.localStorage.getItem(key); \\n      // if present, parse and utilize value, else utilize \\\"initialValue\\\"\\n      return item ? JSON.parse(item) : initialValue;\\n    } catch (err) {\\n      console.log(err);\\n      return initialValue;\\n    }\\n  });\\n\\n  const handleChange = useCallback(\\n    ({ target: { name, value } }) => {\\n      try {\\n        // update localStorage to reflect a \\\"storedValue\\\" change\\n        window.localStorage.setItem(key, JSON.stringify({ [name]: value }));\\n        // update \\\"storedValue\\\" with: [event.target.name]: event.target.value\\n        setStoredValue({ [name]: value });\\n      } catch (err) {\\n        console.log(err);\\n      }\\n    },\\n    [key]\\n  );\\n\\n  const resetValue = useCallback(() => {\\n    try {\\n      // remove localStorage item via \\\"key\\\"\\n      window.localStorage.removeItem(key);\\n      // reset \\\"storedValue\\\" with \\\"initialValue\\\"\\n      setStoredValue(initialValue);\\n    } catch (err) {\\n      console.log(err);\\n      setStoredValue(initialValue);\\n    }\\n  }, [initialValue, key]);\\n\\n  return {\\n    storedValue,\\n    handleChange,\\n    resetValue\\n  };\\n};\\n\\n\\nconst options = [\\n  \\\"Extra Small\\\",\\n  \\\"Small\\\",\\n  \\\"Medium\\\",\\n  \\\"Large\\\",\\n  \\\"Extra Large\\\"\\n];\\n\\n// utilize the custom useEventHandler hook within a function.\\nconst LocalStorageSelect = () => {\\n  const { handleChange, resetValue, storedValue } = useLocalEventStorage(\\n    \\\"size\\\", // key used for localStorage\\n    {\\n      size: \\\"\\\" // value used for the select element\\n    }\\n  );\\n\\n  return (\\n    <Fragment>\\n      <label htmlFor=\\\"size\\\">Select:</label>\\n      <select\\n        name=\\\"size\\\"\\n        placeholder=\\\"Select a size...\\\"\\n        onChange={handleChange}\\n        value={storedValue.size}\\n      >\\n        {options.map(value => (\\n          <option key={value} value={value}>\\n            {value}\\n          </option>\\n        ))}\\n      </select>\\n      <button onClick={resetValue}>\\n        <FaTrash />\\n      </button>\\n    </Fragment>\\n  );\\n};\\n\\nexport default LocalStorageSelect;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Misc/LocalStorage.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { Fragment, useCallback, useState } from \"react\";\nimport { FaTrash } from \"react-icons/fa\";\n\n// create a custom useLocalEventStorage hook that returns an initial object\n// of values, a callback function to update the values and another\n// callback function to reset the values.\nconst useLocalEventStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // attempts to retrieve localStorage item via \"key\" upon initial load\n      const item = window.localStorage.getItem(key); \n      // if present, parse and utilize value, else utilize \"initialValue\"\n      return item ? JSON.parse(item) : initialValue;\n    } catch (err) {\n      console.log(err);\n      return initialValue;\n    }\n  });\n\n  const handleChange = useCallback(\n    ({ target: { name, value } }) => {\n      try {\n        // update localStorage to reflect a \"storedValue\" change\n        window.localStorage.setItem(key, JSON.stringify({ [name]: value }));\n        // update \"storedValue\" with: [event.target.name]: event.target.value\n        setStoredValue({ [name]: value });\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [key]\n  );\n\n  const resetValue = useCallback(() => {\n    try {\n      // remove localStorage item via \"key\"\n      window.localStorage.removeItem(key);\n      // reset \"storedValue\" with \"initialValue\"\n      setStoredValue(initialValue);\n    } catch (err) {\n      console.log(err);\n      setStoredValue(initialValue);\n    }\n  }, [initialValue, key]);\n\n  return {\n    storedValue,\n    handleChange,\n    resetValue\n  };\n};\n\n\nconst options = [\n  \"Extra Small\",\n  \"Small\",\n  \"Medium\",\n  \"Large\",\n  \"Extra Large\"\n];\n\n// utilize the custom useEventHandler hook within a function.\nconst LocalStorageSelect = () => {\n  const { handleChange, resetValue, storedValue } = useLocalEventStorage(\n    \"size\", // key used for localStorage\n    {\n      size: \"\" // value used for the select element\n    }\n  );\n\n  return (\n    <Fragment>\n      <label htmlFor=\"size\">Select:</label>\n      <select\n        name=\"size\"\n        placeholder=\"Select a size...\"\n        onChange={handleChange}\n        value={storedValue.size}\n      >\n        {options.map(value => (\n          <option key={value} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n      <button onClick={resetValue}>\n        <FaTrash />\n      </button>\n    </Fragment>\n  );\n};\n\nexport default LocalStorageSelect;\n`;\n"]},"metadata":{},"sourceType":"module"}