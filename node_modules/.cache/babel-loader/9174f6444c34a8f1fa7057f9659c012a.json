{"ast":null,"code":"import _defineProperty from \"/home/m6d/Documents/react-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/m6d/Documents/react-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar useLocalEventStorage = function useLocalEventStorage(key, initialValue) {\n  var _useState = useState(function () {\n    try {\n      var item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (e) {\n      return initialValue;\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      storedValue = _useState2[0],\n      setStoredValue = _useState2[1];\n\n  var handleChange = useCallback(function (_ref) {\n    var _ref$target = _ref.target,\n        name = _ref$target.name,\n        value = _ref$target.value;\n\n    try {\n      window.localStorage.setItem(key, JSON.stringify(_defineProperty({}, name, value)));\n      setStoredValue(_defineProperty({}, name, value));\n    } catch (e) {\n      console.log(e);\n    }\n  }, [key]);\n  var resetValue = useCallback(function () {\n    try {\n      window.localStorage.removeItem(key);\n      setStoredValue(initialValue);\n    } catch (e) {\n      setStoredValue(initialValue);\n    }\n  }, [initialValue, key]);\n  return {\n    handleChange: handleChange,\n    resetValue: resetValue,\n    storedValue: storedValue\n  };\n};\n\nuseLocalEventStorage.propTypes = {\n  key: PropTypes.string.isRequired,\n  initialValue: PropTypes.any.isRequired\n};\nexport default useLocalEventStorage;","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Hooks/useLocalEventStorage/index.js"],"names":["useState","useCallback","PropTypes","useLocalEventStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","e","storedValue","setStoredValue","handleChange","target","name","value","setItem","stringify","console","log","resetValue","removeItem","propTypes","string","isRequired","any"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,GAAD,EAAMC,YAAN,EAAuB;AAAA,kBACZL,QAAQ,CAAC,YAAM;AACnD,QAAI;AACF,UAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb;AACA,aAAOE,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBD,YAAjC;AACD,KAHD,CAGE,OAAOO,CAAP,EAAU;AACV,aAAOP,YAAP;AACD;AACF,GAP6C,CADI;AAAA;AAAA,MAC3CQ,WAD2C;AAAA,MAC9BC,cAD8B;;AAUlD,MAAMC,YAAY,GAAGd,WAAW,CAC9B,gBAAiC;AAAA,2BAA9Be,MAA8B;AAAA,QAApBC,IAAoB,eAApBA,IAAoB;AAAA,QAAdC,KAAc,eAAdA,KAAc;;AAC/B,QAAI;AACFX,MAAAA,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4Bf,GAA5B,EAAiCM,IAAI,CAACU,SAAL,qBAAkBH,IAAlB,EAAyBC,KAAzB,EAAjC;AACAJ,MAAAA,cAAc,qBAAIG,IAAJ,EAAWC,KAAX,EAAd;AACD,KAHD,CAGE,OAAON,CAAP,EAAU;AACVS,MAAAA,OAAO,CAACC,GAAR,CAAYV,CAAZ;AACD;AACF,GAR6B,EAS9B,CAACR,GAAD,CAT8B,CAAhC;AAYA,MAAMmB,UAAU,GAAGtB,WAAW,CAAC,YAAM;AACnC,QAAI;AACFM,MAAAA,MAAM,CAACC,YAAP,CAAoBgB,UAApB,CAA+BpB,GAA/B;AACAU,MAAAA,cAAc,CAACT,YAAD,CAAd;AACD,KAHD,CAGE,OAAOO,CAAP,EAAU;AACVE,MAAAA,cAAc,CAACT,YAAD,CAAd;AACD;AACF,GAP6B,EAO3B,CAACA,YAAD,EAAeD,GAAf,CAP2B,CAA9B;AASA,SAAO;AACLW,IAAAA,YAAY,EAAZA,YADK;AAELQ,IAAAA,UAAU,EAAVA,UAFK;AAGLV,IAAAA,WAAW,EAAXA;AAHK,GAAP;AAKD,CApCD;;AAsCAV,oBAAoB,CAACsB,SAArB,GAAiC;AAC/BrB,EAAAA,GAAG,EAAEF,SAAS,CAACwB,MAAV,CAAiBC,UADS;AAE/BtB,EAAAA,YAAY,EAAEH,SAAS,CAAC0B,GAAV,CAAcD;AAFG,CAAjC;AAKA,eAAexB,oBAAf","sourcesContent":["import { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst useLocalEventStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (e) {\n      return initialValue;\n    }\n  });\n\n  const handleChange = useCallback(\n    ({ target: { name, value } }) => {\n      try {\n        window.localStorage.setItem(key, JSON.stringify({ [name]: value }));\n        setStoredValue({ [name]: value });\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [key]\n  );\n\n  const resetValue = useCallback(() => {\n    try {\n      window.localStorage.removeItem(key);\n      setStoredValue(initialValue);\n    } catch (e) {\n      setStoredValue(initialValue);\n    }\n  }, [initialValue, key]);\n\n  return {\n    handleChange,\n    resetValue,\n    storedValue\n  };\n};\n\nuseLocalEventStorage.propTypes = {\n  key: PropTypes.string.isRequired,\n  initialValue: PropTypes.any.isRequired\n};\n\nexport default useLocalEventStorage;\n"]},"metadata":{},"sourceType":"module"}