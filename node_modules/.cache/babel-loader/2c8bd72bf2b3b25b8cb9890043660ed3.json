{"ast":null,"code":"export default \"import { useRef, useState, useEffect, useCallback } from \\\"react\\\";\\nimport { FaPlay, FaPause } from \\\"react-icons/fa\\\";\\n\\n// create a custom useTimer hook that returns currentTime, isRunning,\\n// and 3 callback functions: startTimer, pauseTimer, and resetTimer. \\nconst useTimer = autoStart => {\\n  const [currentTime, setTimer] = useState(0);\\n  const [isRunning, setRunning] = useState(autostart);\\n  // utilize a ref to set and clear an interval\\n  const intervalRef = useRef(); \\n\\n  // clear the setInterval timer and set \\\"isRunning\\\" to false.\\n  const clearTimerInterval = useCallback(() => {\\n    if (intervalRef.current) {\\n      clearInterval(intervalRef.current); // clear the interval\\n      intervalRef.current = undefined; // remove the ref.current \\n      setRunning(false);\\n    }\\n  }, [intervalRef]);\\n\\n  // if play was clicked, set \\\"isRunning\\\" to true, and create a \\n  // 1000ms setInterval timer to update \\\"currentTime\\\".\\n  const startTimer = useCallback(() => {\\n    if (!intervalRef.current) {\\n      setRunning(true);\\n      // set ref.current to an interval that updates \\\"currentTime\\\" every 1000ms\\n      intervalRef.current = setInterval(() => {\\n        setTimer(prevState => (prevState + 1 <= 59 ? prevState + 1 : 1));\\n      }, 1000);\\n    }\\n  }, [intervalRef]);\\n\\n  // if pause was clicked, clear the setInterval timer.\\n  const pauseTimer = useCallback(() => clearTimerInterval(), [\\n    clearTimerInterval\\n  ]);\\n\\n  // if reset was clicked, clear the setInterval timer and set \\\"currentTime\\\" \\n  // back to 0.\\n  const resetTimer = useCallback(() => {\\n    clearTimerInterval();\\n    setTimer(0);\\n  }, [clearTimerInterval]);\\n\\n  // during initial load start the timer if \\\"autoStart\\\" is truthy \\n  useEffect(() => {\\n    if (autoStart) {\\n      startTimer();\\n    }\\n  }, [autoStart, startTimer]);\\n\\n  return {\\n    currentTime,\\n    isRunning,\\n    pauseTimer,\\n    resetTimer,\\n    startTimer,\\n  };\\n};\\n\\n// utilize the custom useTimer hook within a function.\\nconst IntervalTimer = () => {\\n  const {\\n    currentTime,\\n    isRunning,\\n    pauseTimer,\\n    resetTimer,\\n    startTimer,\\n  } = useTimer(false); // \\\"autoStart\\\" is set to false\\n\\n  return (\\n    <Fragment>\\n      <p>Timer:</p>\\n      {isRunning \\n        ? <button onClick={pauseTimer}>\\n            <FaPause />\\n          </button>\\n        : <button onClick={startTimer}>\\n            <FaPlay />\\n          </button>\\n       )}\\n      <div>\\n        <span>0:</span>\\n        <span>\\n          {currentTime < 10 ? `0${currentTime}` : currentTime}\\n        </span>\\n        <span>s</span>\\n      </div>\\n      <button onClick={resetTimer}>\\n        <FaTrash />\\n      </button>\\n    </Fragment>\\n  );\\n};\\n\\nexport default IntervalTimer;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Misc/Timer.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import { useRef, useState, useEffect, useCallback } from \"react\";\nimport { FaPlay, FaPause } from \"react-icons/fa\";\n\n// create a custom useTimer hook that returns currentTime, isRunning,\n// and 3 callback functions: startTimer, pauseTimer, and resetTimer. \nconst useTimer = autoStart => {\n  const [currentTime, setTimer] = useState(0);\n  const [isRunning, setRunning] = useState(autostart);\n  // utilize a ref to set and clear an interval\n  const intervalRef = useRef(); \n\n  // clear the setInterval timer and set \"isRunning\" to false.\n  const clearTimerInterval = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current); // clear the interval\n      intervalRef.current = undefined; // remove the ref.current \n      setRunning(false);\n    }\n  }, [intervalRef]);\n\n  // if play was clicked, set \"isRunning\" to true, and create a \n  // 1000ms setInterval timer to update \"currentTime\".\n  const startTimer = useCallback(() => {\n    if (!intervalRef.current) {\n      setRunning(true);\n      // set ref.current to an interval that updates \"currentTime\" every 1000ms\n      intervalRef.current = setInterval(() => {\n        setTimer(prevState => (prevState + 1 <= 59 ? prevState + 1 : 1));\n      }, 1000);\n    }\n  }, [intervalRef]);\n\n  // if pause was clicked, clear the setInterval timer.\n  const pauseTimer = useCallback(() => clearTimerInterval(), [\n    clearTimerInterval\n  ]);\n\n  // if reset was clicked, clear the setInterval timer and set \"currentTime\" \n  // back to 0.\n  const resetTimer = useCallback(() => {\n    clearTimerInterval();\n    setTimer(0);\n  }, [clearTimerInterval]);\n\n  // during initial load start the timer if \"autoStart\" is truthy \n  useEffect(() => {\n    if (autoStart) {\n      startTimer();\n    }\n  }, [autoStart, startTimer]);\n\n  return {\n    currentTime,\n    isRunning,\n    pauseTimer,\n    resetTimer,\n    startTimer,\n  };\n};\n\n// utilize the custom useTimer hook within a function.\nconst IntervalTimer = () => {\n  const {\n    currentTime,\n    isRunning,\n    pauseTimer,\n    resetTimer,\n    startTimer,\n  } = useTimer(false); // \"autoStart\" is set to false\n\n  return (\n    <Fragment>\n      <p>Timer:</p>\n      {isRunning \n        ? <button onClick={pauseTimer}>\n            <FaPause />\n          </button>\n        : <button onClick={startTimer}>\n            <FaPlay />\n          </button>\n       )}\n      <div>\n        <span>0:</span>\n        <span>\n          {currentTime < 10 ? \\`0\\${currentTime}\\` : currentTime}\n        </span>\n        <span>s</span>\n      </div>\n      <button onClick={resetTimer}>\n        <FaTrash />\n      </button>\n    </Fragment>\n  );\n};\n\nexport default IntervalTimer;\n`;\n"]},"metadata":{},"sourceType":"module"}