{"ast":null,"code":"var _jsxFileName = \"/home/m6d/Documents/react-hooks/src/components/Body/Select/Options/index.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DropContainer from \"./DropContainer\";\nimport Option from \"./Option\";\nimport OptionsContainer from \"./OptionsContainer\";\n\nvar SelectOptionsContainer = function SelectOptionsContainer(_ref) {\n  var handleOptionSelect = _ref.handleOptionSelect,\n      isVisible = _ref.isVisible,\n      name = _ref.name,\n      selected = _ref.selected,\n      selectOptions = _ref.selectOptions;\n\n  var onOptionSelect = function onOptionSelect(_ref2) {\n    var _ref2$target$dataset = _ref2.target.dataset,\n        name = _ref2$target$dataset.name,\n        value = _ref2$target$dataset.value;\n    var e = {\n      target: {\n        name: name,\n        value: value\n      }\n    };\n    handleOptionSelect(e);\n  };\n\n  return isVisible && React.createElement(DropContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(OptionsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, selectOptions.map(function (value, key) {\n    return React.createElement(Option, {\n      key: key,\n      name: name,\n      value: value,\n      onClick: onOptionSelect,\n      selected: selected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n  })));\n};\n\nSelectOptionsContainer.propTypes = {\n  handleOptionSelect: PropTypes.func.isRequired,\n  isVisible: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  selected: PropTypes.string,\n  selectOptions: PropTypes.arrayOf(PropTypes.string.isRequired)\n};\nexport default SelectOptionsContainer; // export default class Options extends PureComponent {\n//   static propTypes = {\n//     handleOptionSelect: PropTypes.func.isRequired,\n//     isVisible: PropTypes.bool.isRequired,\n//     name: PropTypes.string.isRequired,\n//     searchText: PropTypes.string,\n//     selected: PropTypes.string,\n//     selectOptions: PropTypes.arrayOf(PropTypes.string.isRequired)\n//   };\n//   onOptionSelect = ({\n//     target: {\n//       dataset: { name, value }\n//     }\n//   }) => {\n//     this.props.handleOptionSelect({ name, value });\n//   };\n//   optionIsActive = (selected, value) =>\n//     selected === value ? \"active-option\" : \"\";\n//   render = () => {\n//     const { isVisible, name, searchText, selectOptions, selected } = this.props;\n//     const options = !searchText\n//       ? selectOptions\n//       : selectOptions.filter(value =>\n//           value.toLowerCase().includes(searchText.toLowerCase())\n//         );\n//     return (\n//       isVisible && (\n//         <div className=\"drop-container\">\n//           <div className=\"options\">\n//             {options && options.length > 0 ? (\n//               options.map((value, key) => (\n//                 <div\n//                   className={`option ${this.optionIsActive(selected, value)}`}\n//                   key={key}\n//                   data-name={name}\n//                   data-value={value}\n//                   onClick={this.onOptionSelect}\n//                 >\n//                   {value}\n//                 </div>\n//               ))\n//             ) : (\n//               <div className=\"no-options\">No options</div>\n//             )}\n//           </div>\n//         </div>\n//       )\n//     );\n//   };\n// }","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Body/Select/Options/index.js"],"names":["React","PropTypes","DropContainer","Option","OptionsContainer","SelectOptionsContainer","handleOptionSelect","isVisible","name","selected","selectOptions","onOptionSelect","target","dataset","value","e","map","key","propTypes","func","isRequired","bool","string","arrayOf"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,OAMzB;AAAA,MALJC,kBAKI,QALJA,kBAKI;AAAA,MAJJC,SAII,QAJJA,SAII;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADJC,aACI,QADJA,aACI;;AACJ,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,QAIjB;AAAA,qCAHJC,MAGI,CAFFC,OAEE;AAAA,QAFSL,IAET,wBAFSA,IAET;AAAA,QAFeM,KAEf,wBAFeA,KAEf;AACJ,QAAMC,CAAC,GAAG;AACRH,MAAAA,MAAM,EAAE;AACNJ,QAAAA,IAAI,EAAJA,IADM;AAENM,QAAAA,KAAK,EAALA;AAFM;AADA,KAAV;AAMAR,IAAAA,kBAAkB,CAACS,CAAD,CAAlB;AACD,GAZD;;AAcA,SACER,SAAS,IACP,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,aAAa,CAACM,GAAd,CAAkB,UAACF,KAAD,EAAQG,GAAR;AAAA,WACjB,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEA,GADP;AAEE,MAAA,IAAI,EAAET,IAFR;AAGE,MAAA,KAAK,EAAEM,KAHT;AAIE,MAAA,OAAO,EAAEH,cAJX;AAKE,MAAA,QAAQ,EAAEF,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADiB;AAAA,GAAlB,CADH,CADF,CAFJ;AAiBD,CAtCD;;AAwCAJ,sBAAsB,CAACa,SAAvB,GAAmC;AACjCZ,EAAAA,kBAAkB,EAAEL,SAAS,CAACkB,IAAV,CAAeC,UADF;AAEjCb,EAAAA,SAAS,EAAEN,SAAS,CAACoB,IAAV,CAAeD,UAFO;AAGjCZ,EAAAA,IAAI,EAAEP,SAAS,CAACqB,MAAV,CAAiBF,UAHU;AAIjCX,EAAAA,QAAQ,EAAER,SAAS,CAACqB,MAJa;AAKjCZ,EAAAA,aAAa,EAAET,SAAS,CAACsB,OAAV,CAAkBtB,SAAS,CAACqB,MAAV,CAAiBF,UAAnC;AALkB,CAAnC;AAQA,eAAef,sBAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DropContainer from \"./DropContainer\";\nimport Option from \"./Option\";\nimport OptionsContainer from \"./OptionsContainer\";\n\nconst SelectOptionsContainer = ({\n  handleOptionSelect,\n  isVisible,\n  name,\n  selected,\n  selectOptions\n}) => {\n  const onOptionSelect = ({\n    target: {\n      dataset: { name, value }\n    }\n  }) => {\n    const e = {\n      target: {\n        name,\n        value\n      }\n    };\n    handleOptionSelect(e);\n  };\n\n  return (\n    isVisible && (\n      <DropContainer>\n        <OptionsContainer>\n          {selectOptions.map((value, key) => (\n            <Option\n              key={key}\n              name={name}\n              value={value}\n              onClick={onOptionSelect}\n              selected={selected}\n            />\n          ))}\n        </OptionsContainer>\n      </DropContainer>\n    )\n  );\n};\n\nSelectOptionsContainer.propTypes = {\n  handleOptionSelect: PropTypes.func.isRequired,\n  isVisible: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  selected: PropTypes.string,\n  selectOptions: PropTypes.arrayOf(PropTypes.string.isRequired)\n};\n\nexport default SelectOptionsContainer;\n\n// export default class Options extends PureComponent {\n//   static propTypes = {\n//     handleOptionSelect: PropTypes.func.isRequired,\n//     isVisible: PropTypes.bool.isRequired,\n//     name: PropTypes.string.isRequired,\n//     searchText: PropTypes.string,\n//     selected: PropTypes.string,\n//     selectOptions: PropTypes.arrayOf(PropTypes.string.isRequired)\n//   };\n\n//   onOptionSelect = ({\n//     target: {\n//       dataset: { name, value }\n//     }\n//   }) => {\n//     this.props.handleOptionSelect({ name, value });\n//   };\n\n//   optionIsActive = (selected, value) =>\n//     selected === value ? \"active-option\" : \"\";\n\n//   render = () => {\n//     const { isVisible, name, searchText, selectOptions, selected } = this.props;\n\n//     const options = !searchText\n//       ? selectOptions\n//       : selectOptions.filter(value =>\n//           value.toLowerCase().includes(searchText.toLowerCase())\n//         );\n\n//     return (\n//       isVisible && (\n//         <div className=\"drop-container\">\n//           <div className=\"options\">\n//             {options && options.length > 0 ? (\n//               options.map((value, key) => (\n//                 <div\n//                   className={`option ${this.optionIsActive(selected, value)}`}\n//                   key={key}\n//                   data-name={name}\n//                   data-value={value}\n//                   onClick={this.onOptionSelect}\n//                 >\n//                   {value}\n//                 </div>\n//               ))\n//             ) : (\n//               <div className=\"no-options\">No options</div>\n//             )}\n//           </div>\n//         </div>\n//       )\n//     );\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}