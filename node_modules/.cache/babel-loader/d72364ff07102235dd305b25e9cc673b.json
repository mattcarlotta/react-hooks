{"ast":null,"code":"export default \"import React, { Fragment, useCallback, useState } from \\\"react\\\";\\nimport { FaTrash } from \\\"react-icons/fa\\\";\\n\\n// create a custom event handler hook that returns an initial object\\n// of values, a callback function to update the values and another\\n// callback function to reset the values.\\nconst useEventHandler = initialState => {\\n  const [value, setValue] = useState(initialState);\\n  const handleChange = useCallback(\\n    ({ target: { name, value } }) => setValue({ [name]: value }),\\n    []\\n  );\\n  const resetValue = useCallback(() => setValue(initialState), []);\\n\\n  return {\\n    value,\\n    handleChange,\\n    resetValue\\n  };\\n};\\n\\nconst options = [\\n  \\\"React.Component\\\", \\n  \\\"React.PureComponent\\\", \\n  \\\"React.StatelessComponent\\\",\\n  \\\"Pure Function\\\"\\n];\\n\\n// utilize the custom useEventHandler hook within a function.\\nconst Select = () => {\\n  const { value, handleChange, resetValue } = useEventHandler({\\n    components: \\\"\\\"\\n  });\\n\\n  return (\\n    <Fragment>\\n      <label htmlFor=\\\"components\\\">Select:</label>\\n      <select\\n        name=\\\"components\\\"\\n        placeholder=\\\"Type something...\\\"\\n        onChange={handleChange}\\n        value={value.component}\\n      >\\n        {options.map(value => (\\n          <option key={value} value={value}>\\n            {value}\\n          </option>\\n        ))}\\n      </select>\\n      <button onClick={resetValue}>\\n        <FaTrash />\\n      </button>\\n    </Fragment>\\n  );\\n};\\n\\nexport default Select;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Forms/Select.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { Fragment, useCallback, useState } from \"react\";\nimport { FaTrash } from \"react-icons/fa\";\n\n// create a custom event handler hook that returns an initial object\n// of values, a callback function to update the values and another\n// callback function to reset the values.\nconst useEventHandler = initialState => {\n  const [value, setValue] = useState(initialState);\n  const handleChange = useCallback(\n    ({ target: { name, value } }) => setValue({ [name]: value }),\n    []\n  );\n  const resetValue = useCallback(() => setValue(initialState), []);\n\n  return {\n    value,\n    handleChange,\n    resetValue\n  };\n};\n\nconst options = [\n  \"React.Component\", \n  \"React.PureComponent\", \n  \"React.StatelessComponent\",\n  \"Pure Function\"\n];\n\n// utilize the custom useEventHandler hook within a function.\nconst Select = () => {\n  const { value, handleChange, resetValue } = useEventHandler({\n    components: \"\"\n  });\n\n  return (\n    <Fragment>\n      <label htmlFor=\"components\">Select:</label>\n      <select\n        name=\"components\"\n        placeholder=\"Type something...\"\n        onChange={handleChange}\n        value={value.component}\n      >\n        {options.map(value => (\n          <option key={value} value={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n      <button onClick={resetValue}>\n        <FaTrash />\n      </button>\n    </Fragment>\n  );\n};\n\nexport default Select;\n`;\n"]},"metadata":{},"sourceType":"module"}