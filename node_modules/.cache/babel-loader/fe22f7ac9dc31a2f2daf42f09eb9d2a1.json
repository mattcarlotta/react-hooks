{"ast":null,"code":"export default \"import React, { useCallback, useEffect, useRef } from \\\"react\\\";\\n\\n// utilize useEffect and useRef with an event listener that\\n// calls a useCallback function.\\n\\nconst ClickHandler = ({ children }) => {\\n  const wrapperRef = useRef();\\n\\n  const handleClick = useCallback(\\n    ({ target }) => {\\n      if (wrapperRef && wrapperRef.current.contains(target)) {\\n        alert(\\\"You clicked me.\\\");\\n      }\\n    },\\n    [wrapperRef]\\n  );\\n\\n  useEffect(() => {\\n    document.addEventListener(\\\"mousedown\\\", handleClick);\\n\\n    return () => {\\n      document.removeEventListener(\\\"mousedown\\\", handleClick);\\n    };\\n  }, [handleClick]);\\n\\n  return <div ref={wrapperRef}>{children}</div>;\\n};\\n\\nClickHandler.propTypes = {\\n  children: PropTypes.any.isRequired\\n};\\n\\nexport default ClickHandler;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/EventListeners/Mousedown.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { useCallback, useEffect, useRef } from \"react\";\n\n// utilize useEffect and useRef with an event listener that\n// calls a useCallback function.\n\nconst ClickHandler = ({ children }) => {\n  const wrapperRef = useRef();\n\n  const handleClick = useCallback(\n    ({ target }) => {\n      if (wrapperRef && wrapperRef.current.contains(target)) {\n        alert(\"You clicked me.\");\n      }\n    },\n    [wrapperRef]\n  );\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, [handleClick]);\n\n  return <div ref={wrapperRef}>{children}</div>;\n};\n\nClickHandler.propTypes = {\n  children: PropTypes.any.isRequired\n};\n\nexport default ClickHandler;\n`;\n"]},"metadata":{},"sourceType":"module"}