{"ast":null,"code":"export default \"import React, { useCallback, useState } from \\\"react\\\";\\nimport { FaRegCalendarCheck, FaTrash } from \\\"react-icons/fa\\\";\\n\\n// create a validateFields function that accepts \\\"fields\\\" and traverses\\n// each of the fields' \\\"value\\\"s to see if they're present and/or they meet\\n// any additional requirements. if there are any errors, they'll get returned\\n// and stored to the field.\\nexport const validateFields = fields => {\\n  const validatedFields = fields.map(({ fieldName, value }) => {\\n    let error = \\\"\\\";\\n    if (!value) {\\n      error = \\\"Required\\\";\\n    } else {\\n      if (fieldName === \\\"name\\\" && value.length < 1)\\n        error = \\\"Name must be longer than 1 character!\\\";\\n\\n      if (\\n        fieldName === \\\"email\\\" &&\\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/i.test(value)\\n      )\\n        error = \\\"Invalid email. (john.smith@example.com)\\\";\\n\\n      if (fieldName === \\\"phone\\\") {\\n        if (!/^[0-9-]+$/.test(value))\\n          error = \\\"Invalid phone number. Do not use special characters.\\\";\\n        else if (value.length !== 14)\\n          error = \\\"Invalid phone format. (1-555-555-5555)\\\";\\n      }\\n    }\\n\\n    return { fieldName, value, error };\\n  });\\n\\n  let errors = null;\\n  validatedFields.forEach(({ error }) => {\\n    if (error) errors += 1;\\n  });\\n\\n  return { validatedFields, errors };\\n};\\n\\n// create a custom \\\"useFieldValidator\\\" hook that returns an initial value \\n// and 3 callback functions: to update, to reset, and to validate the values.\\nconst useFieldValidator = initialState => {\\n  const [values, setValues] = useState(initialState);\\n\\n  const handleChange = useCallback(({ target: { name, value } }) => {\\n    setValues(prevState => ({\\n      ...prevState,\\n      fields: prevState.fields.map(field =>\\n        field.fieldName === name ? { ...field, value } : field\\n      )\\n    }));\\n  }, []);\\n\\n  const resetValues = useCallback(() => setValues(initialState), [\\n    initialState\\n  ]);\\n\\n  const handleSubmit = useCallback(\\n    e => {\\n      e.preventDefault();\\n\\n      // utilize the \\\"validateFields\\\" function above\\n      const { validatedFields, errors } = validateFields(values.fields);\\n\\n      // update \\\"fields\\\" state with \\\"validatedFields\\\"\\n      setValues({ fields: validatedFields });\\n\\n      // check if there are any \\\"errors\\\" before submission\\n      if (!errors) {\\n        setTimeout(() => {\\n          alert(JSON.stringify(values.fields, null, 4));\\n          resetValues();\\n        }, 300);\\n      }\\n    },\\n    [resetValues, values]\\n  );\\n\\n  return {\\n    values,\\n    handleChange,\\n    handleSubmit,\\n    resetValues\\n  };\\n};\\n\\nconst fields = [\\n  { fieldName: \\\"name\\\", value: \\\"\\\", error: \\\"\\\" },\\n  { fieldName: \\\"email\\\", value: \\\"\\\", error: \\\"\\\" },\\n  { fieldName: \\\"phone\\\", value: \\\"\\\", error: \\\"\\\" }\\n];\\n\\n// utilize the custom \\\"useFieldValidator\\\" hook within a function.\\nconst ValidatedFields = () => {\\n  const { values, handleChange, handleSubmit, resetValues } = useValidateFields(\\n    {\\n      fields,\\n      errors: 0\\n    }\\n  );\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      {values.fields.map(({fieldName, error, value }) => (\\n        <div key={fieldName}>\\n          <label htmlFor={fieldName}>{fieldName}</label>\\n          <input\\n            type=\\\"text\\\"\\n            name={fieldName}\\n            placeholder=\\\"Type something...\\\"\\n            onChange={handleChange}\\n            value={value}\\n          />\\n          {error && <p>{error}</p>}\\n        </div>\\n       ))}\\n      <button type=\\\"reset\\\" onClick={resetValue}>\\n        <FaTrash />\\n      </button>\\n      <button type=\\\"submit\\\">\\n         <FaRegCalendarCheck />\\n      </button>\\n    </form>\\n  );\\n};\\n\\nexport default ValidatedFields;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Forms/Validation.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { useCallback, useState } from \"react\";\nimport { FaRegCalendarCheck, FaTrash } from \"react-icons/fa\";\n\n// create a validateFields function that accepts \"fields\" and traverses\n// each of the fields' \"value\"s to see if they're present and/or they meet\n// any additional requirements. if there are any errors, they'll get returned\n// and stored to the field.\nexport const validateFields = fields => {\n  const validatedFields = fields.map(({ fieldName, value }) => {\n    let error = \"\";\n    if (!value) {\n      error = \"Required\";\n    } else {\n      if (fieldName === \"name\" && value.length < 1)\n        error = \"Name must be longer than 1 character!\";\n\n      if (\n        fieldName === \"email\" &&\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/i.test(value)\n      )\n        error = \"Invalid email. (john.smith@example.com)\";\n\n      if (fieldName === \"phone\") {\n        if (!/^[0-9-]+$/.test(value))\n          error = \"Invalid phone number. Do not use special characters.\";\n        else if (value.length !== 14)\n          error = \"Invalid phone format. (1-555-555-5555)\";\n      }\n    }\n\n    return { fieldName, value, error };\n  });\n\n  let errors = null;\n  validatedFields.forEach(({ error }) => {\n    if (error) errors += 1;\n  });\n\n  return { validatedFields, errors };\n};\n\n// create a custom \"useFieldValidator\" hook that returns an initial value \n// and 3 callback functions: to update, to reset, and to validate the values.\nconst useFieldValidator = initialState => {\n  const [values, setValues] = useState(initialState);\n\n  const handleChange = useCallback(({ target: { name, value } }) => {\n    setValues(prevState => ({\n      ...prevState,\n      fields: prevState.fields.map(field =>\n        field.fieldName === name ? { ...field, value } : field\n      )\n    }));\n  }, []);\n\n  const resetValues = useCallback(() => setValues(initialState), [\n    initialState\n  ]);\n\n  const handleSubmit = useCallback(\n    e => {\n      e.preventDefault();\n\n      // utilize the \"validateFields\" function above\n      const { validatedFields, errors } = validateFields(values.fields);\n\n      // update \"fields\" state with \"validatedFields\"\n      setValues({ fields: validatedFields });\n\n      // check if there are any \"errors\" before submission\n      if (!errors) {\n        setTimeout(() => {\n          alert(JSON.stringify(values.fields, null, 4));\n          resetValues();\n        }, 300);\n      }\n    },\n    [resetValues, values]\n  );\n\n  return {\n    values,\n    handleChange,\n    handleSubmit,\n    resetValues\n  };\n};\n\nconst fields = [\n  { fieldName: \"name\", value: \"\", error: \"\" },\n  { fieldName: \"email\", value: \"\", error: \"\" },\n  { fieldName: \"phone\", value: \"\", error: \"\" }\n];\n\n// utilize the custom \"useFieldValidator\" hook within a function.\nconst ValidatedFields = () => {\n  const { values, handleChange, handleSubmit, resetValues } = useValidateFields(\n    {\n      fields,\n      errors: 0\n    }\n  );\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {values.fields.map(({fieldName, error, value }) => (\n        <div key={fieldName}>\n          <label htmlFor={fieldName}>{fieldName}</label>\n          <input\n            type=\"text\"\n            name={fieldName}\n            placeholder=\"Type something...\"\n            onChange={handleChange}\n            value={value}\n          />\n          {error && <p>{error}</p>}\n        </div>\n       ))}\n      <button type=\"reset\" onClick={resetValue}>\n        <FaTrash />\n      </button>\n      <button type=\"submit\">\n         <FaRegCalendarCheck />\n      </button>\n    </form>\n  );\n};\n\nexport default ValidatedFields;\n`;\n"]},"metadata":{},"sourceType":"module"}