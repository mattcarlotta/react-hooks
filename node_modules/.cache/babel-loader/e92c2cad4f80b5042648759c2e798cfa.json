{"ast":null,"code":"import _slicedToArray from \"/home/m6d/Documents/react-hooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useRef, useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar useTimer = function useTimer(autoStart) {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentTime = _useState2[0],\n      setTimer = _useState2[1];\n\n  var _useState3 = useState(autoStart),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isRunning = _useState4[0],\n      setRunning = _useState4[1];\n\n  var intervalRef = useRef();\n  var clearTimerInterval = useCallback(function () {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = undefined;\n      setRunning(false);\n    }\n  }, [intervalRef]);\n  var startTimer = useCallback(function () {\n    if (!intervalRef.current) {\n      setRunning(true);\n      intervalRef.current = setInterval(function () {\n        setTimer(function (prevState) {\n          return prevState + 1 <= 59 ? prevState + 1 : 1;\n        });\n      }, 1000);\n    }\n  }, [intervalRef]);\n  var pauseTimer = useCallback(function () {\n    return clearTimerInterval();\n  }, [clearTimerInterval]);\n  var resetTimer = useCallback(function () {\n    clearTimerInterval();\n    setTimer(0);\n  }, [clearTimerInterval]);\n  useEffect(function () {\n    if (autoStart) {\n      startTimer();\n    }\n  }, [autoStart, startTimer]);\n  return {\n    currentTime: currentTime,\n    isRunning: isRunning,\n    pauseTimer: pauseTimer,\n    resetTimer: resetTimer,\n    startTimer: startTimer\n  };\n};\n\nuseTimer.propTypes = {\n  autostart: PropTypes.bool.isRequired\n};\nexport default useTimer;","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Hooks/useTimer/index.js"],"names":["useRef","useState","useEffect","useCallback","PropTypes","useTimer","autoStart","currentTime","setTimer","isRunning","setRunning","intervalRef","clearTimerInterval","current","clearInterval","undefined","startTimer","setInterval","prevState","pauseTimer","resetTimer","propTypes","autostart","bool","isRequired"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,WAAtC,QAAyD,OAAzD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,SAAS,EAAI;AAAA,kBACIL,QAAQ,CAAC,CAAD,CADZ;AAAA;AAAA,MACrBM,WADqB;AAAA,MACRC,QADQ;;AAAA,mBAEIP,QAAQ,CAACK,SAAD,CAFZ;AAAA;AAAA,MAErBG,SAFqB;AAAA,MAEVC,UAFU;;AAG5B,MAAMC,WAAW,GAAGX,MAAM,EAA1B;AAEA,MAAMY,kBAAkB,GAAGT,WAAW,CAAC,YAAM;AAC3C,QAAIQ,WAAW,CAACE,OAAhB,EAAyB;AACvBC,MAAAA,aAAa,CAACH,WAAW,CAACE,OAAb,CAAb;AACAF,MAAAA,WAAW,CAACE,OAAZ,GAAsBE,SAAtB;AACAL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GANqC,EAMnC,CAACC,WAAD,CANmC,CAAtC;AAQA,MAAMK,UAAU,GAAGb,WAAW,CAAC,YAAM;AACnC,QAAI,CAACQ,WAAW,CAACE,OAAjB,EAA0B;AACxBH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,MAAAA,WAAW,CAACE,OAAZ,GAAsBI,WAAW,CAAC,YAAM;AACtCT,QAAAA,QAAQ,CAAC,UAAAU,SAAS;AAAA,iBAAKA,SAAS,GAAG,CAAZ,IAAiB,EAAjB,GAAsBA,SAAS,GAAG,CAAlC,GAAsC,CAA3C;AAAA,SAAV,CAAR;AACD,OAFgC,EAE9B,IAF8B,CAAjC;AAGD;AACF,GAP6B,EAO3B,CAACP,WAAD,CAP2B,CAA9B;AASA,MAAMQ,UAAU,GAAGhB,WAAW,CAAC;AAAA,WAAMS,kBAAkB,EAAxB;AAAA,GAAD,EAA6B,CACzDA,kBADyD,CAA7B,CAA9B;AAIA,MAAMQ,UAAU,GAAGjB,WAAW,CAAC,YAAM;AACnCS,IAAAA,kBAAkB;AAClBJ,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,GAH6B,EAG3B,CAACI,kBAAD,CAH2B,CAA9B;AAKAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAII,SAAJ,EAAe;AACbU,MAAAA,UAAU;AACX;AACF,GAJQ,EAIN,CAACV,SAAD,EAAYU,UAAZ,CAJM,CAAT;AAMA,SAAO;AACLT,IAAAA,WAAW,EAAXA,WADK;AAELE,IAAAA,SAAS,EAATA,SAFK;AAGLU,IAAAA,UAAU,EAAVA,UAHK;AAILC,IAAAA,UAAU,EAAVA,UAJK;AAKLJ,IAAAA,UAAU,EAAVA;AALK,GAAP;AAOD,CA5CD;;AA8CAX,QAAQ,CAACgB,SAAT,GAAqB;AACnBC,EAAAA,SAAS,EAAElB,SAAS,CAACmB,IAAV,CAAeC;AADP,CAArB;AAIA,eAAenB,QAAf","sourcesContent":["import { useRef, useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst useTimer = autoStart => {\n  const [currentTime, setTimer] = useState(0);\n  const [isRunning, setRunning] = useState(autoStart);\n  const intervalRef = useRef();\n\n  const clearTimerInterval = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = undefined;\n      setRunning(false);\n    }\n  }, [intervalRef]);\n\n  const startTimer = useCallback(() => {\n    if (!intervalRef.current) {\n      setRunning(true);\n      intervalRef.current = setInterval(() => {\n        setTimer(prevState => (prevState + 1 <= 59 ? prevState + 1 : 1));\n      }, 1000);\n    }\n  }, [intervalRef]);\n\n  const pauseTimer = useCallback(() => clearTimerInterval(), [\n    clearTimerInterval\n  ]);\n\n  const resetTimer = useCallback(() => {\n    clearTimerInterval();\n    setTimer(0);\n  }, [clearTimerInterval]);\n\n  useEffect(() => {\n    if (autoStart) {\n      startTimer();\n    }\n  }, [autoStart, startTimer]);\n\n  return {\n    currentTime,\n    isRunning,\n    pauseTimer,\n    resetTimer,\n    startTimer\n  };\n};\n\nuseTimer.propTypes = {\n  autostart: PropTypes.bool.isRequired\n};\n\nexport default useTimer;\n"]},"metadata":{},"sourceType":"module"}