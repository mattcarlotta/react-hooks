{"ast":null,"code":"export default \"import React, { \\n  createContext, \\n  Fragment,\\n  useCallback, \\n  useContext,\\n  useState \\n} from \\\"react\\\";\\nimport { render } from \\\"react-dom\\\";\\nimport { FaTrash } from \\\"react-icons/fa\\\";\\n\\n// NOTE: Utilizing Context can be detrimental to an application's\\n// performance if the application is heavily nested. Changing a\\n// value stored within Context re-renders all of its children. As such,\\n// use sparingly and/or utilize \\\"useMemo\\\" to memoize the functions that\\n// update the value for a better performance.\\n\\n// create a custom event handler hook that returns an initial value, \\n// a callback function to update the value and another callback \\n// function to reset the value.\\nconst useEventHandler = initialValue => {\\n  const [value, setValue] = useState(initialValue);\\n  const handleChange = useCallback(\\n    ({ target: { value } }) => setValue(value),\\n    []\\n  );\\n  const resetValue = useCallback(() => setValue(\\\"\\\"), []);\\n\\n  return {\\n    value,\\n    handleChange,\\n    resetValue\\n  };\\n};\\n\\n// create a \\\"Context\\\" variable for the \\\"Provider\\\" and \\\"useContext\\\" \\n// hook to utilize.\\nconst Context = createContext(); \\n\\n// create a \\\"Provider\\\" component that receives \\\"children\\\" and an \\n// \\\"initialValue\\\". \\n// the \\\"Provider\\\" utilizes the \\\"useEventHandler\\\" hook and the \\\"Context\\\"\\n// defined above.\\nconst Provider = ({ children, initialValue }) => {\\n  // utilizing the \\\"useEventHandler\\\" hook\\n  const props = useEventHandler(initialValue || \\\"\\\");\\n\\n  // utilizing \\\"Context\\\" and passing props via its \\\"value\\\" property.\\n  // as of writing this, Context.Provider only accepts props through this\\n  // \\\"value\\\" property.\\n  return (\\n    <Context.Provider value={{ ...props }}>\\n      {children}\\n    </Context.Provider>\\n  );\\n};\\n\\n// create an \\\"Input\\\" component that utilizes the \\\"Context\\\" defined above \\n// and pass it into \\\"useContext\\\". the result should return the \\n// \\\"useEventHandler\\\" properties: value, handleChange and resetValue.\\nconst Input = () => {\\n  const { value, handleChange, resetValue } = useContext(Context);\\n\\n  return (\\n    <Fragment>\\n      <label htmlFor=\\\"example\\\">Input:</label>\\n      <input\\n        type=\\\"text\\\"\\n        name=\\\"example\\\"\\n        placeholder=\\\"Type something...\\\"\\n        onChange={handleChange}\\n        value={value}\\n      />\\n      <button onClick={resetValue}>\\n        <FaTrash />\\n      </button>\\n    </Fragment>\\n  );\\n};\\n\\n// create an \\\"App\\\" component that wraps the \\\"Input\\\" component with the \\n// \\\"Provider\\\" component defined above. \\n// the \\\"Provider\\\" component needs to be utilized at the application's \\n// root level; that way, it always stays mounted despite its children changing. \\n// lastly, pass \\\"Provider\\\" an \\\"initialValue\\\" if needed. \\nconst App = () => (\\n  <Provider initialValue=\\\"This is an intial value!\\\">\\n        <Input />\\n    </Provider>\\n);\\n\\n// render the \\\"App\\\" component defined above.\\nrender(<App />, document.getElementById(\\\"root\\\"));\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Misc/Context.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { \n  createContext, \n  Fragment,\n  useCallback, \n  useContext,\n  useState \n} from \"react\";\nimport { render } from \"react-dom\";\nimport { FaTrash } from \"react-icons/fa\";\n\n// NOTE: Utilizing Context can be detrimental to an application's\n// performance if the application is heavily nested. Changing a\n// value stored within Context re-renders all of its children. As such,\n// use sparingly and/or utilize \"useMemo\" to memoize the functions that\n// update the value for a better performance.\n\n// create a custom event handler hook that returns an initial value, \n// a callback function to update the value and another callback \n// function to reset the value.\nconst useEventHandler = initialValue => {\n  const [value, setValue] = useState(initialValue);\n  const handleChange = useCallback(\n    ({ target: { value } }) => setValue(value),\n    []\n  );\n  const resetValue = useCallback(() => setValue(\"\"), []);\n\n  return {\n    value,\n    handleChange,\n    resetValue\n  };\n};\n\n// create a \"Context\" variable for the \"Provider\" and \"useContext\" \n// hook to utilize.\nconst Context = createContext(); \n\n// create a \"Provider\" component that receives \"children\" and an \n// \"initialValue\". \n// the \"Provider\" utilizes the \"useEventHandler\" hook and the \"Context\"\n// defined above.\nconst Provider = ({ children, initialValue }) => {\n  // utilizing the \"useEventHandler\" hook\n  const props = useEventHandler(initialValue || \"\");\n\n  // utilizing \"Context\" and passing props via its \"value\" property.\n  // as of writing this, Context.Provider only accepts props through this\n  // \"value\" property.\n  return (\n    <Context.Provider value={{ ...props }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\n// create an \"Input\" component that utilizes the \"Context\" defined above \n// and pass it into \"useContext\". the result should return the \n// \"useEventHandler\" properties: value, handleChange and resetValue.\nconst Input = () => {\n  const { value, handleChange, resetValue } = useContext(Context);\n\n  return (\n    <Fragment>\n      <label htmlFor=\"example\">Input:</label>\n      <input\n        type=\"text\"\n        name=\"example\"\n        placeholder=\"Type something...\"\n        onChange={handleChange}\n        value={value}\n      />\n      <button onClick={resetValue}>\n        <FaTrash />\n      </button>\n    </Fragment>\n  );\n};\n\n// create an \"App\" component that wraps the \"Input\" component with the \n// \"Provider\" component defined above. \n// the \"Provider\" component needs to be utilized at the application's \n// root level; that way, it always stays mounted despite its children changing. \n// lastly, pass \"Provider\" an \"initialValue\" if needed. \nconst App = () => (\n  <Provider initialValue=\"This is an intial value!\">\n        <Input />\n    </Provider>\n);\n\n// render the \"App\" component defined above.\nrender(<App />, document.getElementById(\"root\"));\n`;\n"]},"metadata":{},"sourceType":"module"}