{"ast":null,"code":"export default \"import React, { Fragment, useCallback, useEffect, useState } from \\\"react\\\";\\nimport axios from \\\"axios\\\";\\nimport { FaHeartBroken, FaRedoAlt } from \\\"react-icons/fa\\\";\\n\\nconst initialState = {\\n  data: [],\\n  error: \\\"\\\",\\n  isLoading: true\\n};\\n\\n// create a custom useFetchData hook that returns an initial value \\n// and two functions: fetchData and refreshData. \\nconst useFetchData = () => {\\n  const [data, setData] = useState(initialState);\\n\\n  // an asynchronous function that updates state with data or an error\\n  const fetchData = async () => {\\n    try {\\n      // sets an id between 1 and 1000;\\n      const id = Math.floor(Math.random() * 1000) + 1;\\n\\n      // fetches a photo album by id\\n      const res = await axios.get(\\n        `https://jsonplaceholder.typicode.com/photos?id=${id}`\\n      );\\n\\n      setData({ photos: res.data, error: \\\"\\\", isLoading: false });\\n    } catch (error) {\\n      setData({ photos: [], error: error.toString(), isLoading: false });\\n    }\\n  };\\n\\n  // callback function to reset back to \\\"initialState\\\" that invokes\\n  // \\\"fetchData\\\" again (in the useEffect below)\\n  const refreshData = useCallback(() => setData(initialState), []);\\n\\n  return {\\n    data,\\n    fetchData,\\n    refreshData\\n  };\\n};\\n\\n// a loading placeholder component\\nconst Placeholder = () => (\\n  <p>Loading...</p>\\n);\\n\\n// a component that will either display a server error or display\\n// the data returned from the API.\\nconst DisplayData = ({ error, photos }) => (\\n  <div>\\n    {(error || (photos && photos.length === 0))\\n      ? <Fragment>\\n          <h3>\\n            <FaHeartBroken /> Uh oh, something went wrong.\\n          </h3>\\n          <p>{error}</p>\\n        </Fragment>\\n      : photos.map(({ albumId, id, title, url, thumbnailUrl }) => (\\n          <Fragment key={id}>\\n            <img src={thumbnailUrl} alt=\\\"example\\\" />\\n            <h3>ALBUM ID: {albumId}</h3>\\n            <p>\\n              <strong>TITLE:</strong> {title}\\n            </p>\\n            <p>\\n              <strong>URL: </strong>\\n              <a href={url} target=\\\"_blank\\\">\\n                {url}\\n              </a>\\n            </p>\\n          </Fragment>\\n        ))\\n      )}\\n  </div>\\n);\\n\\n// utilize the custom useFetchData hook within a function and the\\n// two components defined above.\\nconst FetchData = () => {\\n  const { data, fetchData, refreshData } = useFetchData();\\n\\n  // utilize \\\"useEffect\\\" to create a lifecycle that checks if\\n  // \\\"data.isLoading\\\" is true and if so, it fetches data.\\n  useEffect(() => {\\n    if (data.isLoading) {\\n      fetchData();\\n    }\\n  }, [data.isLoading, fetchData]);\\n\\n  return (\\n    <div>\\n      { data.isLoading\\n        ? <Placeholder />\\n        : <DisplayData {...data} />\\n      }\\n      <button onClick={refreshData}>\\n          <FaRedoAlt /> Refresh Data\\n      </button>\\n    </div>\\n  );\\n};\\n\\nexport default FetchData;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Misc/FetchData.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FaHeartBroken, FaRedoAlt } from \"react-icons/fa\";\n\nconst initialState = {\n  data: [],\n  error: \"\",\n  isLoading: true\n};\n\n// create a custom useFetchData hook that returns an initial value \n// and two functions: fetchData and refreshData. \nconst useFetchData = () => {\n  const [data, setData] = useState(initialState);\n\n  // an asynchronous function that updates state with data or an error\n  const fetchData = async () => {\n    try {\n      // sets an id between 1 and 1000;\n      const id = Math.floor(Math.random() * 1000) + 1;\n\n      // fetches a photo album by id\n      const res = await axios.get(\n        \\`https://jsonplaceholder.typicode.com/photos?id=\\${id}\\`\n      );\n\n      setData({ photos: res.data, error: \"\", isLoading: false });\n    } catch (error) {\n      setData({ photos: [], error: error.toString(), isLoading: false });\n    }\n  };\n\n  // callback function to reset back to \"initialState\" that invokes\n  // \"fetchData\" again (in the useEffect below)\n  const refreshData = useCallback(() => setData(initialState), []);\n\n  return {\n    data,\n    fetchData,\n    refreshData\n  };\n};\n\n// a loading placeholder component\nconst Placeholder = () => (\n  <p>Loading...</p>\n);\n\n// a component that will either display a server error or display\n// the data returned from the API.\nconst DisplayData = ({ error, photos }) => (\n  <div>\n    {(error || (photos && photos.length === 0))\n      ? <Fragment>\n          <h3>\n            <FaHeartBroken /> Uh oh, something went wrong.\n          </h3>\n          <p>{error}</p>\n        </Fragment>\n      : photos.map(({ albumId, id, title, url, thumbnailUrl }) => (\n          <Fragment key={id}>\n            <img src={thumbnailUrl} alt=\"example\" />\n            <h3>ALBUM ID: {albumId}</h3>\n            <p>\n              <strong>TITLE:</strong> {title}\n            </p>\n            <p>\n              <strong>URL: </strong>\n              <a href={url} target=\"_blank\">\n                {url}\n              </a>\n            </p>\n          </Fragment>\n        ))\n      )}\n  </div>\n);\n\n// utilize the custom useFetchData hook within a function and the\n// two components defined above.\nconst FetchData = () => {\n  const { data, fetchData, refreshData } = useFetchData();\n\n  // utilize \"useEffect\" to create a lifecycle that checks if\n  // \"data.isLoading\" is true and if so, it fetches data.\n  useEffect(() => {\n    if (data.isLoading) {\n      fetchData();\n    }\n  }, [data.isLoading, fetchData]);\n\n  return (\n    <div>\n      { data.isLoading\n        ? <Placeholder />\n        : <DisplayData {...data} />\n      }\n      <button onClick={refreshData}>\n          <FaRedoAlt /> Refresh Data\n      </button>\n    </div>\n  );\n};\n\nexport default FetchData;\n`;\n"]},"metadata":{},"sourceType":"module"}