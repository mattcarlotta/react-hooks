{"ast":null,"code":"export default \"import React, { Fragment, useCallback, useReducer } from \\\"react\\\";\\nimport { FaMinus, FaPlus } from \\\"react-icons/fa\\\";\\n\\n// create a custom useReducer hook that returns an initial value, \\n// and 3 callback functions: decValue, incValue and resetValue. \\nconst useCounter = initialState => {\\n  const reducer = (state = 0, { type }) => {\\n    switch (type) {\\n      case \\\"inc\\\":\\n        return state + 1;\\n      case \\\"dec\\\":\\n        return state > 0 ? state - 1 : 0;\\n      case \\\"reset\\\":\\n        return 0;\\n      default:\\n        return state;\\n    }\\n  };\\n\\n  const [value, dispatch] = useReducer(reducer, initialState);\\n\\n  const incValue = useCallback(() => dispatch({ type: \\\"inc\\\" }), [dispatch]);\\n\\n  const decValue = useCallback(() => dispatch({ type: \\\"dec\\\" }), [dispatch]);\\n\\n  const resetValue = useCallback(() => dispatch({ type: \\\"reset\\\" }), [dispatch]);\\n\\n  return {\\n    decValue,\\n    incValue,\\n    resetValue,\\n    value\\n  };\\n};\\n\\n// utilize the custom useCounter hook within a function.\\nconst Counter = () => {\\n  const { decValue, incValue, resetValue, value } = useCounter(0);\\n\\n  return (\\n    <Fragment>\\n      <label htmlFor=\\\"example\\\">Counter:</label>\\n      <button onClick={decValue}>\\n        <FaMinus />\\n      </button>\\n      <div>{value}</div>\\n      <button onClick={incValue}>\\n        <FaMinus />\\n      </button>\\n      <button onClick={resetValue}>\\n        <FaTrash />\\n      </button>\\n    </Fragment>\\n  );\\n};\\n\\nexport default Counter;\\n\";","map":{"version":3,"sources":["/home/m6d/Documents/react-hooks/src/components/Code/Misc/Counter.js"],"names":[],"mappings":"AAAA","sourcesContent":["export default `import React, { Fragment, useCallback, useReducer } from \"react\";\nimport { FaMinus, FaPlus } from \"react-icons/fa\";\n\n// create a custom useReducer hook that returns an initial value, \n// and 3 callback functions: decValue, incValue and resetValue. \nconst useCounter = initialState => {\n  const reducer = (state = 0, { type }) => {\n    switch (type) {\n      case \"inc\":\n        return state + 1;\n      case \"dec\":\n        return state > 0 ? state - 1 : 0;\n      case \"reset\":\n        return 0;\n      default:\n        return state;\n    }\n  };\n\n  const [value, dispatch] = useReducer(reducer, initialState);\n\n  const incValue = useCallback(() => dispatch({ type: \"inc\" }), [dispatch]);\n\n  const decValue = useCallback(() => dispatch({ type: \"dec\" }), [dispatch]);\n\n  const resetValue = useCallback(() => dispatch({ type: \"reset\" }), [dispatch]);\n\n  return {\n    decValue,\n    incValue,\n    resetValue,\n    value\n  };\n};\n\n// utilize the custom useCounter hook within a function.\nconst Counter = () => {\n  const { decValue, incValue, resetValue, value } = useCounter(0);\n\n  return (\n    <Fragment>\n      <label htmlFor=\"example\">Counter:</label>\n      <button onClick={decValue}>\n        <FaMinus />\n      </button>\n      <div>{value}</div>\n      <button onClick={incValue}>\n        <FaMinus />\n      </button>\n      <button onClick={resetValue}>\n        <FaTrash />\n      </button>\n    </Fragment>\n  );\n};\n\nexport default Counter;\n`;\n"]},"metadata":{},"sourceType":"module"}